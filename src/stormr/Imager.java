/*
 * Imager.java
 *
 * Created on December 13, 2008, 12:15 PM
 */

package stormr;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 *
 * @author  tom
 */
public class Imager extends javax.swing.JPanel {

    List<Image> images;
    boolean run = true;
    private String message = "working";
    Image logo = new Image(StormrUtils.getImage( "/resources/stormr.png"), "", "" );
    
    /** Creates new form Imager */
    public Imager() {
        initComponents();
        setImages( new ArrayList() );
        new Thread( new Runnable() {

            public void run()
            {
                while (run)
                {
                    try
                    {
                        repaint();
                        Thread.sleep( 400 );
                    }
                    catch (InterruptedException e)
                    {}
                }
            }
        } ).start();
    }
    
    public synchronized void setImages (List<Image> images)
    {
        this.images = new ArrayList(images);
        this.images.add( logo );
    }
    
    public void setText (String text)
    {
        this.setMessage( text );
    }
    
    public void stop()
    {
        run = false;
    }

    @Override
    public void paint( Graphics g )
    {
        super.paint( g );
        
        Random randy = new Random(42);
        
        if (images == null)
            return;
        
        int div = 100;
        
        for (int x = 0;x <= getWidth()/div; x++)
            for (int y = 0;y <= getHeight()/div; y++)
            {
                BufferedImage bi = images.get( randy.nextInt( images.size() ) ).image;
                
                int srcX = (int)(randy.nextDouble() * (bi.getWidth() - div));
                int srcY = (int)(randy.nextDouble() * (bi.getHeight() - div));
                
                g.drawImage( bi, x*div, y*div, x*div+div, y*div+div,
                        srcX, srcY, srcX+div, srcY+div, null );
            }
        
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint( RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON );
        g.setColor( new Color (255,255,255,200) );
        int x = getWidth()/4, y = (getHeight()-200)/2;
        g.fillRoundRect( x, y, getWidth()/2, 200, 50, 50);
        g.setColor( Color.black);
        g.setFont( g.getFont().deriveFont( 15f));
        g.drawString( getMessage(), x+30, y+30  );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 213, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public String getMessage()
    {
        return message;
    }

    public void setMessage( String message )
    {
        this.message = message;
        repaint();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
